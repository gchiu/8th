\ Problem: You have 100 doors in a row that are all initially closed. You make
\ 100 passes by the doors. The first time through, you visit every door and
\ toggle the door (if the door is closed, you open it; if it is open, you close
\ it). The second time you only visit every 2nd door (door #2, #4, #6, ...). The
\ third time, every 3rd door (door #3, #6, #9, ...), etc, until you only visit
\ the 100th door.
\ 
\ Question: What state are the doors in after the last pass? Which are open,
\ which are closed?

\ Array of doors; init to empty; accessing a non-extant member will return
\ 'null', which is treated as 'false', so we don't need to initialize it:
[] var, doors    

\ given a door number, get the value and toggle it:
: toggle-door \ n --
	doors @ over a:@
	not rot swap a:! drop ;

\ print which doors are open:
: .doors
	( 
		doors @ over a:@ nip
		if . space else drop then
	) 1 100 loop ;

\ iterate over the doors, skipping 'n':
: main-pass \ n --
	0
	true
	repeat
		drop
		dup toggle-door
		over n:+
		dup 101 <
	while 2drop drop ;

\ calculate the first 100 doors:
' main-pass 1 100 loop
\ print the results:
.doors cr bye
